// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/dre1080/go-orm-benchmark/benchs/ent/model"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeModel = "Model"
)

// ModelMutation represents an operation that mutate the Models
// nodes in the graph.
type ModelMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	title         *string
	fax           *string
	web           *string
	age           *int
	addage        *int
	right         *bool
	counter       *int64
	addcounter    *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Model, error)
}

var _ ent.Mutation = (*ModelMutation)(nil)

// modelOption allows to manage the mutation configuration using functional options.
type modelOption func(*ModelMutation)

// newModelMutation creates new mutation for $n.Name.
func newModelMutation(c config, op Op, opts ...modelOption) *ModelMutation {
	m := &ModelMutation{
		config:        c,
		op:            op,
		typ:           TypeModel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withModelID sets the id field of the mutation.
func withModelID(id int) modelOption {
	return func(m *ModelMutation) {
		var (
			err   error
			once  sync.Once
			value *Model
		)
		m.oldValue = func(ctx context.Context) (*Model, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Model.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withModel sets the old Model of the mutation.
func withModel(node *Model) modelOption {
	return func(m *ModelMutation) {
		m.oldValue = func(context.Context) (*Model, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ModelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ModelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ModelMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *ModelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *ModelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Model.
// If the Model object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ModelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *ModelMutation) ResetName() {
	m.name = nil
}

// SetTitle sets the title field.
func (m *ModelMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the title value in the mutation.
func (m *ModelMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old title value of the Model.
// If the Model object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ModelMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle reset all changes of the "title" field.
func (m *ModelMutation) ResetTitle() {
	m.title = nil
}

// SetFax sets the fax field.
func (m *ModelMutation) SetFax(s string) {
	m.fax = &s
}

// Fax returns the fax value in the mutation.
func (m *ModelMutation) Fax() (r string, exists bool) {
	v := m.fax
	if v == nil {
		return
	}
	return *v, true
}

// OldFax returns the old fax value of the Model.
// If the Model object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ModelMutation) OldFax(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFax is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFax requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFax: %w", err)
	}
	return oldValue.Fax, nil
}

// ResetFax reset all changes of the "fax" field.
func (m *ModelMutation) ResetFax() {
	m.fax = nil
}

// SetWeb sets the web field.
func (m *ModelMutation) SetWeb(s string) {
	m.web = &s
}

// Web returns the web value in the mutation.
func (m *ModelMutation) Web() (r string, exists bool) {
	v := m.web
	if v == nil {
		return
	}
	return *v, true
}

// OldWeb returns the old web value of the Model.
// If the Model object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ModelMutation) OldWeb(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWeb is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWeb requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeb: %w", err)
	}
	return oldValue.Web, nil
}

// ResetWeb reset all changes of the "web" field.
func (m *ModelMutation) ResetWeb() {
	m.web = nil
}

// SetAge sets the age field.
func (m *ModelMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the age value in the mutation.
func (m *ModelMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old age value of the Model.
// If the Model object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ModelMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to age.
func (m *ModelMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the age field in this mutation.
func (m *ModelMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge reset all changes of the "age" field.
func (m *ModelMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetRight sets the right field.
func (m *ModelMutation) SetRight(b bool) {
	m.right = &b
}

// Right returns the right value in the mutation.
func (m *ModelMutation) Right() (r bool, exists bool) {
	v := m.right
	if v == nil {
		return
	}
	return *v, true
}

// OldRight returns the old right value of the Model.
// If the Model object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ModelMutation) OldRight(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRight is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRight: %w", err)
	}
	return oldValue.Right, nil
}

// ResetRight reset all changes of the "right" field.
func (m *ModelMutation) ResetRight() {
	m.right = nil
}

// SetCounter sets the counter field.
func (m *ModelMutation) SetCounter(i int64) {
	m.counter = &i
	m.addcounter = nil
}

// Counter returns the counter value in the mutation.
func (m *ModelMutation) Counter() (r int64, exists bool) {
	v := m.counter
	if v == nil {
		return
	}
	return *v, true
}

// OldCounter returns the old counter value of the Model.
// If the Model object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ModelMutation) OldCounter(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCounter is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCounter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCounter: %w", err)
	}
	return oldValue.Counter, nil
}

// AddCounter adds i to counter.
func (m *ModelMutation) AddCounter(i int64) {
	if m.addcounter != nil {
		*m.addcounter += i
	} else {
		m.addcounter = &i
	}
}

// AddedCounter returns the value that was added to the counter field in this mutation.
func (m *ModelMutation) AddedCounter() (r int64, exists bool) {
	v := m.addcounter
	if v == nil {
		return
	}
	return *v, true
}

// ResetCounter reset all changes of the "counter" field.
func (m *ModelMutation) ResetCounter() {
	m.counter = nil
	m.addcounter = nil
}

// Op returns the operation name.
func (m *ModelMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Model).
func (m *ModelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ModelMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, model.FieldName)
	}
	if m.title != nil {
		fields = append(fields, model.FieldTitle)
	}
	if m.fax != nil {
		fields = append(fields, model.FieldFax)
	}
	if m.web != nil {
		fields = append(fields, model.FieldWeb)
	}
	if m.age != nil {
		fields = append(fields, model.FieldAge)
	}
	if m.right != nil {
		fields = append(fields, model.FieldRight)
	}
	if m.counter != nil {
		fields = append(fields, model.FieldCounter)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ModelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case model.FieldName:
		return m.Name()
	case model.FieldTitle:
		return m.Title()
	case model.FieldFax:
		return m.Fax()
	case model.FieldWeb:
		return m.Web()
	case model.FieldAge:
		return m.Age()
	case model.FieldRight:
		return m.Right()
	case model.FieldCounter:
		return m.Counter()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ModelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case model.FieldName:
		return m.OldName(ctx)
	case model.FieldTitle:
		return m.OldTitle(ctx)
	case model.FieldFax:
		return m.OldFax(ctx)
	case model.FieldWeb:
		return m.OldWeb(ctx)
	case model.FieldAge:
		return m.OldAge(ctx)
	case model.FieldRight:
		return m.OldRight(ctx)
	case model.FieldCounter:
		return m.OldCounter(ctx)
	}
	return nil, fmt.Errorf("unknown Model field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ModelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case model.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case model.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case model.FieldFax:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFax(v)
		return nil
	case model.FieldWeb:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeb(v)
		return nil
	case model.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case model.FieldRight:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRight(v)
		return nil
	case model.FieldCounter:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCounter(v)
		return nil
	}
	return fmt.Errorf("unknown Model field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ModelMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, model.FieldAge)
	}
	if m.addcounter != nil {
		fields = append(fields, model.FieldCounter)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ModelMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case model.FieldAge:
		return m.AddedAge()
	case model.FieldCounter:
		return m.AddedCounter()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ModelMutation) AddField(name string, value ent.Value) error {
	switch name {
	case model.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	case model.FieldCounter:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCounter(v)
		return nil
	}
	return fmt.Errorf("unknown Model numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ModelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ModelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ModelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Model nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ModelMutation) ResetField(name string) error {
	switch name {
	case model.FieldName:
		m.ResetName()
		return nil
	case model.FieldTitle:
		m.ResetTitle()
		return nil
	case model.FieldFax:
		m.ResetFax()
		return nil
	case model.FieldWeb:
		m.ResetWeb()
		return nil
	case model.FieldAge:
		m.ResetAge()
		return nil
	case model.FieldRight:
		m.ResetRight()
		return nil
	case model.FieldCounter:
		m.ResetCounter()
		return nil
	}
	return fmt.Errorf("unknown Model field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ModelMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ModelMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ModelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ModelMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ModelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ModelMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ModelMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Model unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ModelMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Model edge %s", name)
}
