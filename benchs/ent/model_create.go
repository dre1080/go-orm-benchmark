// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/dre1080/go-orm-benchmark/benchs/ent/model"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ModelCreate is the builder for creating a Model entity.
type ModelCreate struct {
	config
	mutation *ModelMutation
	hooks    []Hook
}

// SetName sets the name field.
func (mc *ModelCreate) SetName(s string) *ModelCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetTitle sets the title field.
func (mc *ModelCreate) SetTitle(s string) *ModelCreate {
	mc.mutation.SetTitle(s)
	return mc
}

// SetFax sets the fax field.
func (mc *ModelCreate) SetFax(s string) *ModelCreate {
	mc.mutation.SetFax(s)
	return mc
}

// SetWeb sets the web field.
func (mc *ModelCreate) SetWeb(s string) *ModelCreate {
	mc.mutation.SetWeb(s)
	return mc
}

// SetAge sets the age field.
func (mc *ModelCreate) SetAge(i int) *ModelCreate {
	mc.mutation.SetAge(i)
	return mc
}

// SetRight sets the right field.
func (mc *ModelCreate) SetRight(b bool) *ModelCreate {
	mc.mutation.SetRight(b)
	return mc
}

// SetCounter sets the counter field.
func (mc *ModelCreate) SetCounter(i int64) *ModelCreate {
	mc.mutation.SetCounter(i)
	return mc
}

// Mutation returns the ModelMutation object of the builder.
func (mc *ModelCreate) Mutation() *ModelMutation {
	return mc.mutation
}

// Save creates the Model in the database.
func (mc *ModelCreate) Save(ctx context.Context) (*Model, error) {
	if _, ok := mc.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := mc.mutation.Title(); !ok {
		return nil, &ValidationError{Name: "title", err: errors.New("ent: missing required field \"title\"")}
	}
	if _, ok := mc.mutation.Fax(); !ok {
		return nil, &ValidationError{Name: "fax", err: errors.New("ent: missing required field \"fax\"")}
	}
	if _, ok := mc.mutation.Web(); !ok {
		return nil, &ValidationError{Name: "web", err: errors.New("ent: missing required field \"web\"")}
	}
	if _, ok := mc.mutation.Age(); !ok {
		return nil, &ValidationError{Name: "age", err: errors.New("ent: missing required field \"age\"")}
	}
	if _, ok := mc.mutation.Right(); !ok {
		return nil, &ValidationError{Name: "right", err: errors.New("ent: missing required field \"right\"")}
	}
	if _, ok := mc.mutation.Counter(); !ok {
		return nil, &ValidationError{Name: "counter", err: errors.New("ent: missing required field \"counter\"")}
	}
	var (
		err  error
		node *Model
	)
	if len(mc.hooks) == 0 {
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *ModelCreate) SaveX(ctx context.Context) *Model {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mc *ModelCreate) sqlSave(ctx context.Context) (*Model, error) {
	var (
		m     = &Model{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: model.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: model.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: model.FieldName,
		})
		m.Name = value
	}
	if value, ok := mc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: model.FieldTitle,
		})
		m.Title = value
	}
	if value, ok := mc.mutation.Fax(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: model.FieldFax,
		})
		m.Fax = value
	}
	if value, ok := mc.mutation.Web(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: model.FieldWeb,
		})
		m.Web = value
	}
	if value, ok := mc.mutation.Age(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: model.FieldAge,
		})
		m.Age = value
	}
	if value, ok := mc.mutation.Right(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: model.FieldRight,
		})
		m.Right = value
	}
	if value, ok := mc.mutation.Counter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: model.FieldCounter,
		})
		m.Counter = value
	}
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	m.ID = int(id)
	return m, nil
}
